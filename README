NAME
    Chatty -- Real-time (comet) chat application written with Perl/Catalyst

SYNOPSIS
        cpan Catalyst::Devel                    # install Catalyst

        perl Makefile.PL
        make installdeps                        # install other dependencies

        cp extra/nginx.conf /etc/nginx/nginx.conf
        /etc/rc.d/nginx start                   # run nginx http server

        cp extra/cometd/meteord.conf.dist /etc/meteord.conf
        # also add the 'SubscriberDocumentRoot' option to meteord.conf;
        # it should be set to $REPOSITORY_ROOT/extra/cometd/public_html

        cd extra/cometd; ./meteord -d           # run meteord in a new shell

        cat extra/hosts >>/etc/hosts            # configure hostnames
        sqlite3 db/info.db <db/schema.sql       # create the user database

        ./script/chatty_server.pl -f            # run the app
        firefox http://chatty.com/              # finally, see if it works

DESCRIPTION
    This is a toy web application implementing real-time (comet) chat. I
    wrote this as an exercise to see how easy it would be to write such an
    application using Perl/Catalyst. It was fairly easy.

    Catalyst itself provides no streaming support or message bus, so I am
    using a dedicated comet server to handle all of that, meteord. However,
    in order to get meteord to work, it needs to be serving on the same port
    as the Catalyst app. I accomplished this by using nginx as a reverse
    proxy. However, you can't just use localhost because meteord does some
    checks on the hostname to make sure it will not run into any
    cross-domain restrictions, and those checks barf if the hostname doesn't
    have a TLD. The fix for this is to just assign some fake hostnames to
    localhost; the provided nginx configuration uses chatty.com for the
    Catalyst app and data.chatty.com for the comet server, both on port
    number 80. The actual Catalyst app runs on port 3000 and meteord runs on
    port 4670. That's the reason for the complicated setup.

    The perl dependencies can all be installed locally in a subdirectory of
    the user's home directory using local::lib, like this:

        # install local::lib (see L<http://search.cpan.org/dist/local-lib/>)
        # then,
        eval $(perl -I$HOME/perl5/lib/perl5 -Mlocal::lib)

    It is also usually much nicer to work with cpanminus rather than plain
    old cpan:

        # install cpanminus
        curl -L http://cpanmin.us | perl - --self-upgrade

BUGS
    Tests are sadly nonexistent. :-(

AUTHOR
    Charles McGarvey <chazmcgarvey at brokenzipper.com>

LICENSE
    This library is free software. You can redistribute it and/or modify it
    under the same terms as Perl itself.

